# -*- coding: utf-8 -*-
"""Neural Network with Pytorch

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/143w_KRR76GmzIgoFELQ2RRrxdM7Bat0Y
"""

#import dependencies
from torch import nn, save, load
from torch.optim import Adam
from torch.utils.data import DataLoader
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
from torchvision import datasets

#Get data
train = datasets.MNIST(root='data', train=True, download=True, transform=ToTensor())
datasets= DataLoader(train, 32)
#1,28,28 = 0-9

#Image Classifier
class ImageClassifier(nn.Module):
  def __init__(self):
    super().__init__()
    self.model = nn.Sequential(
        nn.Conv2d(1, 32, (3,3)),
        nn.ReLU(),
        nn.Conv2d(32, 64, (3,3)),
        nn.ReLU(),
        nn.Conv2d(64, 64, (3,3)),
        nn.ReLU(),
        nn.Flatten(),
        nn.Linear(64*(28-6)*(28-6), 10)
    )
  def forward(self, x):
    return self.model(x)

#Instance of the neural network, loss, optimizer
clf = ImageClassifier()
opt = Adam(clf.parameters(), lr=0.001)
loss_fn = nn.CrossEntropyLoss()

# Trainig Flow

if __name__ == "__main__":
  for epoch in range(10): #train for 10 epoch
    for batch in datasets:
      X,y = batch
      yhat = clf(X)
      loss = loss_fn(yhat, y)

      #apply backdrop
      opt.zero_grad()
      loss.backward()
      opt.step()

      print(f"Epoch{epoch} loss is {loss.item()}")

with open ('model_state.pt', 'wb') as f:
  save(clf.state_dict(), f)

if __name__ == "__main__":
  with open('model_state.pt', 'rb') as f:
    clf.load_state_dict(load(f))

    img = Image.open('img_1.jpg')
    img_tensor = ToTensor()(img).unsqueeze(0)
    print(clf(img_tensor))